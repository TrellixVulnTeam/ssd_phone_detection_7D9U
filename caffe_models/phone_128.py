import torch
import torch.nn as nn
import torch.nn.functional as F
import custom_nn as custom_nn
from layers import *
import os

def local_path(fname):
    return os.path.join(os.path.dirname(__file__),fname)

class phone_128(nn.Module):
    def __init__(self):
        super(phone_128, self).__init__()
        self.conv0=nn.Conv2d(1, 8, kernel_size=(3, 3), padding=(1, 1), stride=(2, 2), groups=1, dilation=1, bias=True)
        self.conv0_bn=nn.BatchNorm2d(num_features=8)
        self.conv0_relu=nn.ReLU(inplace=True)
        self.conv1_dw=nn.Conv2d(8, 8, kernel_size=(3, 3), padding=(1, 1), stride=(1, 1), groups=8, dilation=1, bias=True)
        self.conv1_dw_bn=nn.BatchNorm2d(num_features=8)
        self.conv1_dw_relu=nn.ReLU(inplace=True)
        self.conv1=nn.Conv2d(8, 16, kernel_size=(1, 1), padding=(0, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv1_bn=nn.BatchNorm2d(num_features=16)
        self.conv1_relu=nn.ReLU(inplace=True)
        self.conv2_dw=nn.Conv2d(16, 16, kernel_size=(3, 3), padding=(1, 1), stride=(2, 2), groups=16, dilation=1, bias=True)
        self.conv2_dw_bn=nn.BatchNorm2d(num_features=16)
        self.conv2_dw_relu=nn.ReLU(inplace=True)
        self.conv2=nn.Conv2d(16, 32, kernel_size=(1, 1), padding=(0, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv2_bn=nn.BatchNorm2d(num_features=32)
        self.conv2_relu=nn.ReLU(inplace=True)
        self.conv3_dw=nn.Conv2d(32, 32, kernel_size=(3, 3), padding=(1, 1), stride=(1, 1), groups=32, dilation=1, bias=True)
        self.conv3_dw_bn=nn.BatchNorm2d(num_features=32)
        self.conv3_dw_relu=nn.ReLU(inplace=True)
        self.conv3=nn.Conv2d(32, 32, kernel_size=(1, 1), padding=(0, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv3_bn=nn.BatchNorm2d(num_features=32)
        self.conv3_relu=nn.ReLU(inplace=True)
        self.conv4_dw=nn.Conv2d(32, 32, kernel_size=(3, 3), padding=(1, 1), stride=(2, 2), groups=32, dilation=1, bias=True)
        self.conv4_dw_bn=nn.BatchNorm2d(num_features=32)
        self.conv4_dw_relu=nn.ReLU(inplace=True)
        self.conv4=nn.Conv2d(32, 64, kernel_size=(1, 1), padding=(0, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv4_bn=nn.BatchNorm2d(num_features=64)
        self.conv4_relu=nn.ReLU(inplace=True)
        self.conv5_dw=nn.Conv2d(64, 64, kernel_size=(3, 3), padding=(1, 1), stride=(1, 1), groups=64, dilation=1, bias=True)
        self.conv5_dw_bn=nn.BatchNorm2d(num_features=64)
        self.conv5_dw_relu=nn.ReLU(inplace=True)
        self.conv5=nn.Conv2d(64, 64, kernel_size=(1, 1), padding=(0, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv5_bn=nn.BatchNorm2d(num_features=64)
        self.conv5_relu=nn.ReLU(inplace=True)
        self.conv6_dw=nn.Conv2d(64, 64, kernel_size=(3, 3), padding=(1, 1), stride=(1, 1), groups=64, dilation=1, bias=True)
        self.conv6_dw_bn=nn.BatchNorm2d(num_features=64)
        self.conv6_dw_relu=nn.ReLU(inplace=True)
        self.conv6=nn.Conv2d(64, 128, kernel_size=(1, 1), padding=(0, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv6_bn=nn.BatchNorm2d(num_features=128)
        self.conv6_relu=nn.ReLU(inplace=True)
        self.conv7_dw=nn.Conv2d(128, 128, kernel_size=(3, 3), padding=(1, 1), stride=(1, 1), groups=128, dilation=1, bias=True)
        self.conv7_dw_bn=nn.BatchNorm2d(num_features=128)
        self.conv7_dw_relu=nn.ReLU(inplace=True)
        self.conv7=nn.Conv2d(128, 128, kernel_size=(1, 1), padding=(0, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv7_bn=nn.BatchNorm2d(num_features=128)
        self.conv7_relu=nn.ReLU(inplace=True)
        self.conv8_dw=nn.Conv2d(128, 128, kernel_size=(3, 3), padding=(1, 1), stride=(1, 1), groups=128, dilation=1, bias=True)
        self.conv8_dw_bn=nn.BatchNorm2d(num_features=128)
        self.conv8_dw_relu=nn.ReLU(inplace=True)
        self.conv8=nn.Conv2d(128, 128, kernel_size=(1, 1), padding=(0, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv8_bn=nn.BatchNorm2d(num_features=128)
        self.conv8_relu=nn.ReLU(inplace=True)
        self.conv9_dw=nn.Conv2d(128, 128, kernel_size=(3, 3), padding=(1, 1), stride=(1, 1), groups=128, dilation=1, bias=True)
        self.conv9_dw_bn=nn.BatchNorm2d(num_features=128)
        self.conv9_dw_relu=nn.ReLU(inplace=True)
        self.conv9=nn.Conv2d(128, 128, kernel_size=(1, 1), padding=(0, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv9_bn=nn.BatchNorm2d(num_features=128)
        self.conv9_relu=nn.ReLU(inplace=True)
        self.conv10_dw=nn.Conv2d(128, 128, kernel_size=(3, 3), padding=(1, 1), stride=(1, 1), groups=128, dilation=1, bias=True)
        self.conv10_dw_bn=nn.BatchNorm2d(num_features=128)
        self.conv10_dw_relu=nn.ReLU(inplace=True)
        self.conv10=nn.Conv2d(128, 128, kernel_size=(1, 1), padding=(0, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv10_bn=nn.BatchNorm2d(num_features=128)
        self.conv10_relu=nn.ReLU(inplace=True)
        self.conv11_dw=nn.Conv2d(128, 128, kernel_size=(3, 3), padding=(1, 1), stride=(1, 1), groups=128, dilation=1, bias=True)
        self.conv11_dw_bn=nn.BatchNorm2d(num_features=128)
        self.conv11_dw_relu=nn.ReLU(inplace=True)
        self.conv11=nn.Conv2d(128, 128, kernel_size=(1, 1), padding=(0, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv11_bn=nn.BatchNorm2d(num_features=128)
        self.conv11_relu=nn.ReLU(inplace=True)
        self.conv12_dw=nn.Conv2d(128, 128, kernel_size=(3, 3), padding=(1, 1), stride=(2, 2), groups=128, dilation=1, bias=True)
        self.conv12_dw_bn=nn.BatchNorm2d(num_features=128)
        self.conv12_dw_relu=nn.ReLU(inplace=True)
        self.conv12=nn.Conv2d(128, 128, kernel_size=(1, 1), padding=(0, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv12_bn=nn.BatchNorm2d(num_features=128)
        self.conv12_relu=nn.ReLU(inplace=True)
        self.conv13_dw=nn.Conv2d(128, 128, kernel_size=(3, 3), padding=(1, 1), stride=(1, 1), groups=128, dilation=1, bias=True)
        self.conv13_dw_bn=nn.BatchNorm2d(num_features=128)
        self.conv13_dw_relu=nn.ReLU(inplace=True)
        self.conv13=nn.Conv2d(128, 128, kernel_size=(1, 1), padding=(0, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv13_bn=nn.BatchNorm2d(num_features=128)
        self.conv13_relu=nn.ReLU(inplace=True)
        self.conv14_1=nn.Conv2d(128, 64, kernel_size=(1, 1), padding=(0, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv14_1_bn=nn.BatchNorm2d(num_features=64)
        self.conv14_1_relu=nn.ReLU(inplace=True)
        self.conv14_2=nn.Conv2d(64, 128, kernel_size=(3, 3), padding=(1, 1), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv14_2_bn=nn.BatchNorm2d(num_features=128)
        self.conv14_2_relu=nn.ReLU(inplace=True)
        self.conv15_1=nn.Conv2d(128, 64, kernel_size=(1, 1), padding=(0, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv15_1_bn=nn.BatchNorm2d(num_features=64)
        self.conv15_1_relu=nn.ReLU(inplace=True)
        self.conv15_2=nn.Conv2d(64, 128, kernel_size=(3, 3), padding=(1, 1), stride=(2, 2), groups=1, dilation=1, bias=True)
        self.conv15_2_bn=nn.BatchNorm2d(num_features=128)
        self.conv15_2_relu=nn.ReLU(inplace=True)
        self.conv16_1=nn.Conv2d(128, 64, kernel_size=(1, 1), padding=(0, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv16_1_bn=nn.BatchNorm2d(num_features=64)
        self.conv16_1_relu=nn.ReLU(inplace=True)
        self.conv16_2=nn.Conv2d(64, 128, kernel_size=(3, 3), padding=(1, 1), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv16_2_bn=nn.BatchNorm2d(num_features=128)
        self.conv16_2_relu=nn.ReLU(inplace=True)
        self.conv11_mbox_loc=nn.Conv2d(128, 24, kernel_size=(1, 1), padding=(0, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv11_mbox_loc_perm=custom_nn.Permute(order=[0, 2, 3, 1])
        self.conv11_mbox_loc_flat=custom_nn.Flatten()
        self.conv11_mbox_conf=nn.Conv2d(128, 12, kernel_size=(1, 1), padding=(0, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv11_mbox_conf_perm=custom_nn.Permute(order=[0, 2, 3, 1])
        self.conv11_mbox_conf_flat=custom_nn.Flatten()
        self.conv13_mbox_loc=nn.Conv2d(128, 24, kernel_size=(1, 1), padding=(0, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv13_mbox_loc_perm=custom_nn.Permute(order=[0, 2, 3, 1])
        self.conv13_mbox_loc_flat=custom_nn.Flatten()
        self.conv13_mbox_conf=nn.Conv2d(128, 12, kernel_size=(1, 1), padding=(0, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv13_mbox_conf_perm=custom_nn.Permute(order=[0, 2, 3, 1])
        self.conv13_mbox_conf_flat=custom_nn.Flatten()
        self.conv14_2_mbox_loc=nn.Conv2d(128, 24, kernel_size=(1, 1), padding=(0, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv14_2_mbox_loc_perm=custom_nn.Permute(order=[0, 2, 3, 1])
        self.conv14_2_mbox_loc_flat=custom_nn.Flatten()
        self.conv14_2_mbox_conf=nn.Conv2d(128, 12, kernel_size=(1, 1), padding=(0, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv14_2_mbox_conf_perm=custom_nn.Permute(order=[0, 2, 3, 1])
        self.conv14_2_mbox_conf_flat=custom_nn.Flatten()
        self.conv15_2_mbox_loc=nn.Conv2d(128, 24, kernel_size=(1, 1), padding=(0, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv15_2_mbox_loc_perm=custom_nn.Permute(order=[0, 2, 3, 1])
        self.conv15_2_mbox_loc_flat=custom_nn.Flatten()
        self.conv15_2_mbox_conf=nn.Conv2d(128, 12, kernel_size=(1, 1), padding=(0, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv15_2_mbox_conf_perm=custom_nn.Permute(order=[0, 2, 3, 1])
        self.conv15_2_mbox_conf_flat=custom_nn.Flatten()
        self.conv16_2_mbox_loc=nn.Conv2d(128, 24, kernel_size=(1, 1), padding=(0, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv16_2_mbox_loc_perm=custom_nn.Permute(order=[0, 2, 3, 1])
        self.conv16_2_mbox_loc_flat=custom_nn.Flatten()
        self.conv16_2_mbox_conf=nn.Conv2d(128, 12, kernel_size=(1, 1), padding=(0, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv16_2_mbox_conf_perm=custom_nn.Permute(order=[0, 2, 3, 1])
        self.conv16_2_mbox_conf_flat=custom_nn.Flatten()

        self.mbox_loc=custom_nn.Concat(axis=1, n_inputs=5)
        self.mbox_conf=custom_nn.Concat(axis=1, n_inputs=5)

        self.softmax = nn.Softmax(dim=-1)
        self.num_classes=2
        self.load_state_dict(torch.load(local_path('phone_128.pth')))
        self.detect = Detect(self.num_classes, 0, 200, 0.01, 0.45)
        with torch.no_grad():
            self.priors = custom_nn.PriorBox(local_path('xywh_anchors2496x4.npy'))()
        
    def forward(self,data):
        conv0=self.conv0(data)
        conv0=self.conv0_bn(conv0)
        conv0=self.conv0_relu(conv0)
        conv1_dw=self.conv1_dw(conv0)
        conv1_dw=self.conv1_dw_bn(conv1_dw)
        conv1_dw=self.conv1_dw_relu(conv1_dw)
        conv1=self.conv1(conv1_dw)
        conv1=self.conv1_bn(conv1)
        conv1=self.conv1_relu(conv1)
        conv2_dw=self.conv2_dw(conv1)
        conv2_dw=self.conv2_dw_bn(conv2_dw)
        conv2_dw=self.conv2_dw_relu(conv2_dw)
        conv2=self.conv2(conv2_dw)
        conv2=self.conv2_bn(conv2)
        conv2=self.conv2_relu(conv2)
        conv3_dw=self.conv3_dw(conv2)
        conv3_dw=self.conv3_dw_bn(conv3_dw)
        conv3_dw=self.conv3_dw_relu(conv3_dw)
        conv3=self.conv3(conv3_dw)
        conv3=self.conv3_bn(conv3)
        conv3=self.conv3_relu(conv3)
        conv4_dw=self.conv4_dw(conv3)
        conv4_dw=self.conv4_dw_bn(conv4_dw)
        conv4_dw=self.conv4_dw_relu(conv4_dw)
        conv4=self.conv4(conv4_dw)
        conv4=self.conv4_bn(conv4)
        conv4=self.conv4_relu(conv4)
        conv5_dw=self.conv5_dw(conv4)
        conv5_dw=self.conv5_dw_bn(conv5_dw)
        conv5_dw=self.conv5_dw_relu(conv5_dw)
        conv5=self.conv5(conv5_dw)
        conv5=self.conv5_bn(conv5)
        conv5=self.conv5_relu(conv5)
        conv6_dw=self.conv6_dw(conv5)
        conv6_dw=self.conv6_dw_bn(conv6_dw)
        conv6_dw=self.conv6_dw_relu(conv6_dw)
        conv6=self.conv6(conv6_dw)
        conv6=self.conv6_bn(conv6)
        conv6=self.conv6_relu(conv6)
        conv7_dw=self.conv7_dw(conv6)
        conv7_dw=self.conv7_dw_bn(conv7_dw)
        conv7_dw=self.conv7_dw_relu(conv7_dw)
        conv7=self.conv7(conv7_dw)
        conv7=self.conv7_bn(conv7)
        conv7=self.conv7_relu(conv7)
        conv8_dw=self.conv8_dw(conv7)
        conv8_dw=self.conv8_dw_bn(conv8_dw)
        conv8_dw=self.conv8_dw_relu(conv8_dw)
        conv8=self.conv8(conv8_dw)
        conv8=self.conv8_bn(conv8)
        conv8=self.conv8_relu(conv8)
        conv9_dw=self.conv9_dw(conv8)
        conv9_dw=self.conv9_dw_bn(conv9_dw)
        conv9_dw=self.conv9_dw_relu(conv9_dw)
        conv9=self.conv9(conv9_dw)
        conv9=self.conv9_bn(conv9)
        conv9=self.conv9_relu(conv9)
        conv10_dw=self.conv10_dw(conv9)
        conv10_dw=self.conv10_dw_bn(conv10_dw)
        conv10_dw=self.conv10_dw_relu(conv10_dw)
        conv10=self.conv10(conv10_dw)
        conv10=self.conv10_bn(conv10)
        conv10=self.conv10_relu(conv10)
        conv11_dw=self.conv11_dw(conv10)
        conv11_dw=self.conv11_dw_bn(conv11_dw)
        conv11_dw=self.conv11_dw_relu(conv11_dw)
        conv11=self.conv11(conv11_dw)
        conv11=self.conv11_bn(conv11)
        conv11=self.conv11_relu(conv11)
        conv12_dw=self.conv12_dw(conv11)
        conv12_dw=self.conv12_dw_bn(conv12_dw)
        conv12_dw=self.conv12_dw_relu(conv12_dw)
        conv12=self.conv12(conv12_dw)
        conv12=self.conv12_bn(conv12)
        conv12=self.conv12_relu(conv12)
        conv13_dw=self.conv13_dw(conv12)
        conv13_dw=self.conv13_dw_bn(conv13_dw)
        conv13_dw=self.conv13_dw_relu(conv13_dw)
        conv13=self.conv13(conv13_dw)
        conv13=self.conv13_bn(conv13)
        conv13=self.conv13_relu(conv13)
        conv14_1=self.conv14_1(conv13)
        conv14_1=self.conv14_1_bn(conv14_1)
        conv14_1=self.conv14_1_relu(conv14_1)
        conv14_2=self.conv14_2(conv14_1)
        conv14_2=self.conv14_2_bn(conv14_2)
        conv14_2=self.conv14_2_relu(conv14_2)
        conv15_1=self.conv15_1(conv14_2)
        conv15_1=self.conv15_1_bn(conv15_1)
        conv15_1=self.conv15_1_relu(conv15_1)
        conv15_2=self.conv15_2(conv15_1)
        conv15_2=self.conv15_2_bn(conv15_2)
        conv15_2=self.conv15_2_relu(conv15_2)
        conv16_1=self.conv16_1(conv15_2)
        conv16_1=self.conv16_1_bn(conv16_1)
        conv16_1=self.conv16_1_relu(conv16_1)
        conv16_2=self.conv16_2(conv16_1)
        conv16_2=self.conv16_2_bn(conv16_2)
        conv16_2=self.conv16_2_relu(conv16_2)
        conv11_mbox_loc=self.conv11_mbox_loc(conv11)
        conv11_mbox_loc_perm=self.conv11_mbox_loc_perm(conv11_mbox_loc)
        conv11_mbox_loc_flat=self.conv11_mbox_loc_flat(conv11_mbox_loc_perm)
        conv11_mbox_conf=self.conv11_mbox_conf(conv11)
        conv11_mbox_conf_perm=self.conv11_mbox_conf_perm(conv11_mbox_conf)
        conv11_mbox_conf_flat=self.conv11_mbox_conf_flat(conv11_mbox_conf_perm)
        conv13_mbox_loc=self.conv13_mbox_loc(conv13)
        conv13_mbox_loc_perm=self.conv13_mbox_loc_perm(conv13_mbox_loc)
        conv13_mbox_loc_flat=self.conv13_mbox_loc_flat(conv13_mbox_loc_perm)
        conv13_mbox_conf=self.conv13_mbox_conf(conv13)
        conv13_mbox_conf_perm=self.conv13_mbox_conf_perm(conv13_mbox_conf)
        conv13_mbox_conf_flat=self.conv13_mbox_conf_flat(conv13_mbox_conf_perm)
        conv14_2_mbox_loc=self.conv14_2_mbox_loc(conv14_2)
        conv14_2_mbox_loc_perm=self.conv14_2_mbox_loc_perm(conv14_2_mbox_loc)
        conv14_2_mbox_loc_flat=self.conv14_2_mbox_loc_flat(conv14_2_mbox_loc_perm)
        conv14_2_mbox_conf=self.conv14_2_mbox_conf(conv14_2)
        conv14_2_mbox_conf_perm=self.conv14_2_mbox_conf_perm(conv14_2_mbox_conf)
        conv14_2_mbox_conf_flat=self.conv14_2_mbox_conf_flat(conv14_2_mbox_conf_perm)
        conv15_2_mbox_loc=self.conv15_2_mbox_loc(conv15_2)
        conv15_2_mbox_loc_perm=self.conv15_2_mbox_loc_perm(conv15_2_mbox_loc)
        conv15_2_mbox_loc_flat=self.conv15_2_mbox_loc_flat(conv15_2_mbox_loc_perm)
        conv15_2_mbox_conf=self.conv15_2_mbox_conf(conv15_2)
        conv15_2_mbox_conf_perm=self.conv15_2_mbox_conf_perm(conv15_2_mbox_conf)
        conv15_2_mbox_conf_flat=self.conv15_2_mbox_conf_flat(conv15_2_mbox_conf_perm)
        conv16_2_mbox_loc=self.conv16_2_mbox_loc(conv16_2)
        conv16_2_mbox_loc_perm=self.conv16_2_mbox_loc_perm(conv16_2_mbox_loc)
        conv16_2_mbox_loc_flat=self.conv16_2_mbox_loc_flat(conv16_2_mbox_loc_perm)
        conv16_2_mbox_conf=self.conv16_2_mbox_conf(conv16_2)
        conv16_2_mbox_conf_perm=self.conv16_2_mbox_conf_perm(conv16_2_mbox_conf)
        conv16_2_mbox_conf_flat=self.conv16_2_mbox_conf_flat(conv16_2_mbox_conf_perm)
        mbox_loc=self.mbox_loc(conv11_mbox_loc_flat,conv13_mbox_loc_flat,conv14_2_mbox_loc_flat,conv15_2_mbox_loc_flat,conv16_2_mbox_loc_flat)
        mbox_conf=self.mbox_conf(conv11_mbox_conf_flat,conv13_mbox_conf_flat,conv14_2_mbox_conf_flat,conv15_2_mbox_conf_flat,conv16_2_mbox_conf_flat)

        if self.training:
            output = (
                mbox_loc.view(mbox_loc.size(0), -1, 4),
                mbox_conf.view(mbox_conf.size(0), -1, self.num_classes),
                self.priors.cuda()
                ,None)
        else:
            output = (self.detect(
                    mbox_loc.view(mbox_loc.size(0), -1, 4),                   # loc preds
                    self.softmax(mbox_conf.view(mbox_conf.size(0), -1,
                    self.num_classes)),                # conf preds
                    self.priors.cuda(),
                    ),None)

        return output

