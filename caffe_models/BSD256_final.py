import torch
import torch.nn as nn
import torch.nn.functional as F
import custom_nn as custom_nn
from layers import *
import os

def local_path(fname):
    return os.path.join(os.path.dirname(__file__),fname)

class BSD256(nn.Module):
    def __init__(self):
        super(BSD256, self).__init__()
        self.conv1_1_v=custom_nn.BinaryConv2d(3, 8, kernel_size=(3, 1), padding=(1, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv1_1_h=custom_nn.BinaryConv2d(8, 64, kernel_size=(1, 3), padding=(0, 1), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.relu1_1=nn.ReLU(inplace=True)
        self.conv1_2_v=custom_nn.BinaryConv2d(64, 32, kernel_size=(3, 1), padding=(1, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv1_2_h=custom_nn.BinaryConv2d(32, 64, kernel_size=(1, 3), padding=(0, 1), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.relu1_2=nn.ReLU(inplace=True)
        self.pool1=nn.MaxPool2d(kernel_size=2, stride=2)
        self.conv2_1_v=custom_nn.BinaryConv2d(64, 64, kernel_size=(3, 1), padding=(1, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv2_1_h=custom_nn.BinaryConv2d(64, 128, kernel_size=(1, 3), padding=(0, 1), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.relu2_1=nn.ReLU(inplace=True)
        self.conv2_2_v=custom_nn.BinaryConv2d(128, 96, kernel_size=(3, 1), padding=(1, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv2_2_h=custom_nn.BinaryConv2d(96, 128, kernel_size=(1, 3), padding=(0, 1), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.relu2_2=nn.ReLU(inplace=True)
        self.pool2=nn.MaxPool2d(kernel_size=2, stride=2)
        self.conv3_1_v=custom_nn.BinaryConv2d(128, 128, kernel_size=(3, 1), padding=(1, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv3_1_h=custom_nn.BinaryConv2d(128, 256, kernel_size=(1, 3), padding=(0, 1), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.relu3_1=nn.ReLU(inplace=True)
        self.conv3_2_v=custom_nn.BinaryConv2d(256, 160, kernel_size=(3, 1), padding=(1, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv3_2_h=custom_nn.BinaryConv2d(160, 256, kernel_size=(1, 3), padding=(0, 1), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.relu3_2=nn.ReLU(inplace=True)
        self.conv3_3_v=custom_nn.BinaryConv2d(256, 160, kernel_size=(3, 1), padding=(1, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv3_3_h=custom_nn.BinaryConv2d(160, 256, kernel_size=(1, 3), padding=(0, 1), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.relu3_3=nn.ReLU(inplace=True)
        self.pool3=nn.MaxPool2d(kernel_size=2, stride=2)
        self.conv4_1_v=custom_nn.BinaryConv2d(256, 224, kernel_size=(3, 1), padding=(1, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv4_1_h=custom_nn.BinaryConv2d(224, 512, kernel_size=(1, 3), padding=(0, 1), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.relu4_1=nn.ReLU(inplace=True)
        self.conv4_2_v=custom_nn.BinaryConv2d(512, 320, kernel_size=(3, 1), padding=(1, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv4_2_h=custom_nn.BinaryConv2d(320, 512, kernel_size=(1, 3), padding=(0, 1), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.relu4_2=nn.ReLU(inplace=True)
        self.conv4_3_v=custom_nn.BinaryConv2d(512, 320, kernel_size=(3, 1), padding=(1, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv4_3_h=custom_nn.BinaryConv2d(320, 512, kernel_size=(1, 3), padding=(0, 1), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.relu4_3=nn.ReLU(inplace=True)
        self.pool4=nn.MaxPool2d(kernel_size=2, stride=2)
        self.conv5_1_v=custom_nn.BinaryConv2d(512, 256, kernel_size=(3, 1), padding=(1, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv5_1_h=custom_nn.BinaryConv2d(256, 512, kernel_size=(1, 3), padding=(0, 1), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.relu5_1=nn.ReLU(inplace=True)
        self.conv5_2_v=custom_nn.BinaryConv2d(512, 256, kernel_size=(3, 1), padding=(1, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv5_2_h=custom_nn.BinaryConv2d(256, 512, kernel_size=(1, 3), padding=(0, 1), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.relu5_2=nn.ReLU(inplace=True)
        self.conv5_3_v=custom_nn.BinaryConv2d(512, 256, kernel_size=(3, 1), padding=(1, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv5_3_h=custom_nn.BinaryConv2d(256, 512, kernel_size=(1, 3), padding=(0, 1), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.relu5_3=nn.ReLU(inplace=True)
        self.fc6_v=custom_nn.BinaryConv2d(512, 320, kernel_size=(3, 1), padding=(1, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.fc6_h=custom_nn.BinaryConv2d(320, 1024, kernel_size=(1, 3), padding=(0, 1), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.relu6=nn.ReLU(inplace=True)
        self.fc7=custom_nn.BinaryConv2d(1024, 1024, kernel_size=(1, 1), padding=(0, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.relu7=nn.ReLU(inplace=True)
        self.conv6_1=custom_nn.BinaryConv2d(1024, 256, kernel_size=(1, 1), padding=(0, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv6_1_relu=nn.ReLU(inplace=True)
        self.conv6_2_v=custom_nn.BinaryConv2d(256, 256, kernel_size=(3, 1), padding=(1, 0), stride=(2, 1), groups=1, dilation=1, bias=True)
        self.conv6_2_h=custom_nn.BinaryConv2d(256, 512, kernel_size=(1, 3), padding=(0, 1), stride=(1, 2), groups=1, dilation=1, bias=True)
        self.conv6_2_relu=nn.ReLU(inplace=True)
        self.conv7_1=custom_nn.BinaryConv2d(512, 128, kernel_size=(1, 1), padding=(0, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv7_1_relu=nn.ReLU(inplace=True)
        self.conv7_2_v=custom_nn.BinaryConv2d(128, 128, kernel_size=(3, 1), padding=(1, 0), stride=(2, 1), groups=1, dilation=1, bias=True)
        self.conv7_2_h=custom_nn.BinaryConv2d(128, 256, kernel_size=(1, 3), padding=(0, 1), stride=(1, 2), groups=1, dilation=1, bias=True)
        self.conv7_2_relu=nn.ReLU(inplace=True)
        self.conv8_1=custom_nn.BinaryConv2d(256, 128, kernel_size=(1, 1), padding=(0, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv8_1_relu=nn.ReLU(inplace=True)
        self.conv8_2_v=custom_nn.BinaryConv2d(128, 128, kernel_size=(3, 1), padding=(1, 0), stride=(2, 1), groups=1, dilation=1, bias=True)
        self.conv8_2_h=custom_nn.BinaryConv2d(128, 256, kernel_size=(1, 3), padding=(0, 1), stride=(1, 2), groups=1, dilation=1, bias=True)
        self.conv8_2_relu=nn.ReLU(inplace=True)
        self.pool6=nn.AdaptiveAvgPool2d(output_size=(1, 1))
        self.conv3_3_mbox_loc_v_new=custom_nn.BinaryConv2d(256, 32, kernel_size=(3, 1), padding=(1, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv3_3_mbox_loc_h_new=custom_nn.BinaryConv2d(32, 12, kernel_size=(1, 3), padding=(0, 1), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv3_3_mbox_loc_perm=custom_nn.Permute(order=[0, 2, 3, 1])
        self.conv3_3_mbox_loc_flat=custom_nn.Flatten()
        self.conv3_3_mbox_conf_v_new=custom_nn.BinaryConv2d(256, 32, kernel_size=(3, 1), padding=(1, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv3_3_mbox_conf_h_new=custom_nn.BinaryConv2d(32, 12, kernel_size=(1, 3), padding=(0, 1), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv3_3_mbox_conf_perm=custom_nn.Permute(order=[0, 2, 3, 1])
        self.conv3_3_mbox_conf_flat=custom_nn.Flatten()
        self.conv4_3_mbox_loc_v_new=custom_nn.BinaryConv2d(512, 64, kernel_size=(3, 1), padding=(1, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv4_3_mbox_loc_h_new=custom_nn.BinaryConv2d(64, 24, kernel_size=(1, 3), padding=(0, 1), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv4_3_mbox_loc_perm=custom_nn.Permute(order=[0, 2, 3, 1])
        self.conv4_3_mbox_loc_flat=custom_nn.Flatten()
        self.conv4_3_mbox_conf_v_new=custom_nn.BinaryConv2d(512, 64, kernel_size=(3, 1), padding=(1, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv4_3_mbox_conf_h_new=custom_nn.BinaryConv2d(64, 24, kernel_size=(1, 3), padding=(0, 1), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv4_3_mbox_conf_perm=custom_nn.Permute(order=[0, 2, 3, 1])
        self.conv4_3_mbox_conf_flat=custom_nn.Flatten()
        self.fc7_mbox_loc_v_new=custom_nn.BinaryConv2d(1024, 64, kernel_size=(3, 1), padding=(1, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.fc7_mbox_loc_h_new=custom_nn.BinaryConv2d(64, 24, kernel_size=(1, 3), padding=(0, 1), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.fc7_mbox_loc_perm=custom_nn.Permute(order=[0, 2, 3, 1])
        self.fc7_mbox_loc_flat=custom_nn.Flatten()
        self.fc7_mbox_conf_v_new=custom_nn.BinaryConv2d(1024, 64, kernel_size=(3, 1), padding=(1, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.fc7_mbox_conf_h_new=custom_nn.BinaryConv2d(64, 24, kernel_size=(1, 3), padding=(0, 1), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.fc7_mbox_conf_perm=custom_nn.Permute(order=[0, 2, 3, 1])
        self.fc7_mbox_conf_flat=custom_nn.Flatten()
        self.conv6_2_mbox_loc_v_new=custom_nn.BinaryConv2d(512, 64, kernel_size=(3, 1), padding=(1, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv6_2_mbox_loc_h_new=custom_nn.BinaryConv2d(64, 24, kernel_size=(1, 3), padding=(0, 1), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv6_2_mbox_loc_perm=custom_nn.Permute(order=[0, 2, 3, 1])
        self.conv6_2_mbox_loc_flat=custom_nn.Flatten()
        self.conv6_2_mbox_conf_v_new=custom_nn.BinaryConv2d(512, 64, kernel_size=(3, 1), padding=(1, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv6_2_mbox_conf_h_new=custom_nn.BinaryConv2d(64, 24, kernel_size=(1, 3), padding=(0, 1), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv6_2_mbox_conf_perm=custom_nn.Permute(order=[0, 2, 3, 1])
        self.conv6_2_mbox_conf_flat=custom_nn.Flatten()
        self.conv7_2_mbox_loc_v_new=custom_nn.BinaryConv2d(256, 64, kernel_size=(3, 1), padding=(1, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv7_2_mbox_loc_h_new=custom_nn.BinaryConv2d(64, 24, kernel_size=(1, 3), padding=(0, 1), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv7_2_mbox_loc_perm=custom_nn.Permute(order=[0, 2, 3, 1])
        self.conv7_2_mbox_loc_flat=custom_nn.Flatten()
        self.conv7_2_mbox_conf_v_new=custom_nn.BinaryConv2d(256, 64, kernel_size=(3, 1), padding=(1, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv7_2_mbox_conf_h_new=custom_nn.BinaryConv2d(64, 24, kernel_size=(1, 3), padding=(0, 1), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv7_2_mbox_conf_perm=custom_nn.Permute(order=[0, 2, 3, 1])
        self.conv7_2_mbox_conf_flat=custom_nn.Flatten()
        self.conv8_2_mbox_loc_v_new=custom_nn.BinaryConv2d(256, 64, kernel_size=(3, 1), padding=(1, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv8_2_mbox_loc_h_new=custom_nn.BinaryConv2d(64, 24, kernel_size=(1, 3), padding=(0, 1), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv8_2_mbox_loc_perm=custom_nn.Permute(order=[0, 2, 3, 1])
        self.conv8_2_mbox_loc_flat=custom_nn.Flatten()
        self.conv8_2_mbox_conf_v_new=custom_nn.BinaryConv2d(256, 64, kernel_size=(3, 1), padding=(1, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv8_2_mbox_conf_h_new=custom_nn.BinaryConv2d(64, 24, kernel_size=(1, 3), padding=(0, 1), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.conv8_2_mbox_conf_perm=custom_nn.Permute(order=[0, 2, 3, 1])
        self.conv8_2_mbox_conf_flat=custom_nn.Flatten()
        self.pool6_mbox_loc_v_new=custom_nn.BinaryConv2d(256, 64, kernel_size=(3, 1), padding=(1, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.pool6_mbox_loc_h_new=custom_nn.BinaryConv2d(64, 24, kernel_size=(1, 3), padding=(0, 1), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.pool6_mbox_loc_perm=custom_nn.Permute(order=[0, 2, 3, 1])
        self.pool6_mbox_loc_flat=custom_nn.Flatten()
        self.pool6_mbox_conf_v_new=custom_nn.BinaryConv2d(256, 64, kernel_size=(3, 1), padding=(1, 0), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.pool6_mbox_conf_h_new=custom_nn.BinaryConv2d(64, 24, kernel_size=(1, 3), padding=(0, 1), stride=(1, 1), groups=1, dilation=1, bias=True)
        self.pool6_mbox_conf_perm=custom_nn.Permute(order=[0, 2, 3, 1])
        self.pool6_mbox_conf_flat=custom_nn.Flatten()
        self.mbox_loc=custom_nn.Concat(axis=1, n_inputs=7)
        self.mbox_conf=custom_nn.Concat(axis=1, n_inputs=7)
        self.softmax = nn.Softmax(dim=-1)
        self.num_classes=4
        self.load_state_dict(torch.load(local_path('BSD256.pth')))
        self.detect = Detect(self.num_classes, 0, 200, 0.01, 0.45)
        with torch.no_grad():
            self.priors = custom_nn.PriorBox(local_path('xywh_anchors20478x4.npy'))()

    def forward(self,data):
        conv1_1_v=self.conv1_1_v(data)
        conv1_1=self.conv1_1_h(conv1_1_v)
        conv1_1=self.relu1_1(conv1_1)
        conv1_2_v=self.conv1_2_v(conv1_1)
        conv1_2=self.conv1_2_h(conv1_2_v)
        conv1_2=self.relu1_2(conv1_2)
        pool1=self.pool1(conv1_2)
        conv2_1_v=self.conv2_1_v(pool1)
        conv2_1=self.conv2_1_h(conv2_1_v)
        conv2_1=self.relu2_1(conv2_1)
        conv2_2_v=self.conv2_2_v(conv2_1)
        conv2_2=self.conv2_2_h(conv2_2_v)
        conv2_2=self.relu2_2(conv2_2)
        pool2=self.pool2(conv2_2)
        conv3_1_v=self.conv3_1_v(pool2)
        conv3_1=self.conv3_1_h(conv3_1_v)
        conv3_1=self.relu3_1(conv3_1)
        conv3_2_v=self.conv3_2_v(conv3_1)
        conv3_2=self.conv3_2_h(conv3_2_v)
        conv3_2=self.relu3_2(conv3_2)
        conv3_3_v=self.conv3_3_v(conv3_2)
        conv3_3=self.conv3_3_h(conv3_3_v)
        conv3_3=self.relu3_3(conv3_3)
        pool3=self.pool3(conv3_3)
        conv4_1_v=self.conv4_1_v(pool3)
        conv4_1=self.conv4_1_h(conv4_1_v)
        conv4_1=self.relu4_1(conv4_1)
        conv4_2_v=self.conv4_2_v(conv4_1)
        conv4_2=self.conv4_2_h(conv4_2_v)
        conv4_2=self.relu4_2(conv4_2)
        conv4_3_v=self.conv4_3_v(conv4_2)
        conv4_3=self.conv4_3_h(conv4_3_v)
        conv4_3=self.relu4_3(conv4_3)
        pool4=self.pool4(conv4_3)
        conv5_1_v=self.conv5_1_v(pool4)
        conv5_1=self.conv5_1_h(conv5_1_v)
        conv5_1=self.relu5_1(conv5_1)
        conv5_2_v=self.conv5_2_v(conv5_1)
        conv5_2=self.conv5_2_h(conv5_2_v)
        conv5_2=self.relu5_2(conv5_2)
        conv5_3_v=self.conv5_3_v(conv5_2)
        conv5_3=self.conv5_3_h(conv5_3_v)
        conv5_3=self.relu5_3(conv5_3)
        fc6_v=self.fc6_v(conv5_3)
        fc6=self.fc6_h(fc6_v)
        fc6=self.relu6(fc6)
        fc7=self.fc7(fc6)
        fc7=self.relu7(fc7)
        conv6_1=self.conv6_1(fc7)
        conv6_1=self.conv6_1_relu(conv6_1)
        conv6_2_v=self.conv6_2_v(conv6_1)
        conv6_2=self.conv6_2_h(conv6_2_v)
        conv6_2=self.conv6_2_relu(conv6_2)
        conv7_1=self.conv7_1(conv6_2)
        conv7_1=self.conv7_1_relu(conv7_1)
        conv7_2_v=self.conv7_2_v(conv7_1)
        conv7_2=self.conv7_2_h(conv7_2_v)
        conv7_2=self.conv7_2_relu(conv7_2)
        conv8_1=self.conv8_1(conv7_2)
        conv8_1=self.conv8_1_relu(conv8_1)
        conv8_2_v=self.conv8_2_v(conv8_1)
        conv8_2=self.conv8_2_h(conv8_2_v)
        conv8_2=self.conv8_2_relu(conv8_2)
        pool6=self.pool6(conv8_2)
        conv3_3_mbox_loc_v=self.conv3_3_mbox_loc_v_new(conv3_3)
        conv3_3_mbox_loc=self.conv3_3_mbox_loc_h_new(conv3_3_mbox_loc_v)
        conv3_3_mbox_loc_perm=self.conv3_3_mbox_loc_perm(conv3_3_mbox_loc)
        conv3_3_mbox_loc_flat=self.conv3_3_mbox_loc_flat(conv3_3_mbox_loc_perm)
        conv3_3_mbox_conf_v=self.conv3_3_mbox_conf_v_new(conv3_3)
        conv3_3_mbox_conf=self.conv3_3_mbox_conf_h_new(conv3_3_mbox_conf_v)
        conv3_3_mbox_conf_perm=self.conv3_3_mbox_conf_perm(conv3_3_mbox_conf)
        conv3_3_mbox_conf_flat=self.conv3_3_mbox_conf_flat(conv3_3_mbox_conf_perm)
        conv4_3_mbox_loc_v=self.conv4_3_mbox_loc_v_new(conv4_3)
        conv4_3_mbox_loc=self.conv4_3_mbox_loc_h_new(conv4_3_mbox_loc_v)
        conv4_3_mbox_loc_perm=self.conv4_3_mbox_loc_perm(conv4_3_mbox_loc)
        conv4_3_mbox_loc_flat=self.conv4_3_mbox_loc_flat(conv4_3_mbox_loc_perm)
        conv4_3_mbox_conf_v=self.conv4_3_mbox_conf_v_new(conv4_3)
        conv4_3_mbox_conf=self.conv4_3_mbox_conf_h_new(conv4_3_mbox_conf_v)
        conv4_3_mbox_conf_perm=self.conv4_3_mbox_conf_perm(conv4_3_mbox_conf)
        conv4_3_mbox_conf_flat=self.conv4_3_mbox_conf_flat(conv4_3_mbox_conf_perm)
        fc7_mbox_loc_v=self.fc7_mbox_loc_v_new(fc7)
        fc7_mbox_loc=self.fc7_mbox_loc_h_new(fc7_mbox_loc_v)
        fc7_mbox_loc_perm=self.fc7_mbox_loc_perm(fc7_mbox_loc)
        fc7_mbox_loc_flat=self.fc7_mbox_loc_flat(fc7_mbox_loc_perm)
        fc7_mbox_conf_v=self.fc7_mbox_conf_v_new(fc7)
        fc7_mbox_conf=self.fc7_mbox_conf_h_new(fc7_mbox_conf_v)
        fc7_mbox_conf_perm=self.fc7_mbox_conf_perm(fc7_mbox_conf)
        fc7_mbox_conf_flat=self.fc7_mbox_conf_flat(fc7_mbox_conf_perm)
        conv6_2_mbox_loc_v=self.conv6_2_mbox_loc_v_new(conv6_2)
        conv6_2_mbox_loc=self.conv6_2_mbox_loc_h_new(conv6_2_mbox_loc_v)
        conv6_2_mbox_loc_perm=self.conv6_2_mbox_loc_perm(conv6_2_mbox_loc)
        conv6_2_mbox_loc_flat=self.conv6_2_mbox_loc_flat(conv6_2_mbox_loc_perm)
        conv6_2_mbox_conf_v=self.conv6_2_mbox_conf_v_new(conv6_2)
        conv6_2_mbox_conf=self.conv6_2_mbox_conf_h_new(conv6_2_mbox_conf_v)
        conv6_2_mbox_conf_perm=self.conv6_2_mbox_conf_perm(conv6_2_mbox_conf)
        conv6_2_mbox_conf_flat=self.conv6_2_mbox_conf_flat(conv6_2_mbox_conf_perm)
        conv7_2_mbox_loc_v=self.conv7_2_mbox_loc_v_new(conv7_2)
        conv7_2_mbox_loc=self.conv7_2_mbox_loc_h_new(conv7_2_mbox_loc_v)
        conv7_2_mbox_loc_perm=self.conv7_2_mbox_loc_perm(conv7_2_mbox_loc)
        conv7_2_mbox_loc_flat=self.conv7_2_mbox_loc_flat(conv7_2_mbox_loc_perm)
        conv7_2_mbox_conf_v=self.conv7_2_mbox_conf_v_new(conv7_2)
        conv7_2_mbox_conf=self.conv7_2_mbox_conf_h_new(conv7_2_mbox_conf_v)
        conv7_2_mbox_conf_perm=self.conv7_2_mbox_conf_perm(conv7_2_mbox_conf)
        conv7_2_mbox_conf_flat=self.conv7_2_mbox_conf_flat(conv7_2_mbox_conf_perm)
        conv8_2_mbox_loc_v=self.conv8_2_mbox_loc_v_new(conv8_2)
        conv8_2_mbox_loc=self.conv8_2_mbox_loc_h_new(conv8_2_mbox_loc_v)
        conv8_2_mbox_loc_perm=self.conv8_2_mbox_loc_perm(conv8_2_mbox_loc)
        conv8_2_mbox_loc_flat=self.conv8_2_mbox_loc_flat(conv8_2_mbox_loc_perm)
        conv8_2_mbox_conf_v=self.conv8_2_mbox_conf_v_new(conv8_2)
        conv8_2_mbox_conf=self.conv8_2_mbox_conf_h_new(conv8_2_mbox_conf_v)
        conv8_2_mbox_conf_perm=self.conv8_2_mbox_conf_perm(conv8_2_mbox_conf)
        conv8_2_mbox_conf_flat=self.conv8_2_mbox_conf_flat(conv8_2_mbox_conf_perm)
        pool6_mbox_loc_v=self.pool6_mbox_loc_v_new(pool6)
        pool6_mbox_loc=self.pool6_mbox_loc_h_new(pool6_mbox_loc_v)
        pool6_mbox_loc_perm=self.pool6_mbox_loc_perm(pool6_mbox_loc)
        pool6_mbox_loc_flat=self.pool6_mbox_loc_flat(pool6_mbox_loc_perm)
        pool6_mbox_conf_v=self.pool6_mbox_conf_v_new(pool6)
        pool6_mbox_conf=self.pool6_mbox_conf_h_new(pool6_mbox_conf_v)
        pool6_mbox_conf_perm=self.pool6_mbox_conf_perm(pool6_mbox_conf)
        pool6_mbox_conf_flat=self.pool6_mbox_conf_flat(pool6_mbox_conf_perm)
        mbox_loc=self.mbox_loc(conv3_3_mbox_loc_flat,conv4_3_mbox_loc_flat,fc7_mbox_loc_flat,conv6_2_mbox_loc_flat,conv7_2_mbox_loc_flat,conv8_2_mbox_loc_flat,pool6_mbox_loc_flat)
        mbox_conf=self.mbox_conf(conv3_3_mbox_conf_flat,conv4_3_mbox_conf_flat,fc7_mbox_conf_flat,conv6_2_mbox_conf_flat,conv7_2_mbox_conf_flat,conv8_2_mbox_conf_flat,pool6_mbox_conf_flat)


        if self.training:
            output = (
                mbox_loc.view(mbox_loc.size(0), -1, 4),
                mbox_conf.view(mbox_conf.size(0), -1, self.num_classes),
                self.priors.cuda()
                ,None)
        else:
            output = (self.detect(
                    mbox_loc.view(mbox_loc.size(0), -1, 4),                   # loc preds
                    self.softmax(mbox_conf.view(mbox_conf.size(0), -1,
                    self.num_classes)),                # conf preds
                    self.priors.cuda(),
                    ),None)

        return output